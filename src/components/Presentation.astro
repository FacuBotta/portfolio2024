---
import LinkedInIcon from "./icons/LinkedInIcon.astro";
import GitHubMiniIcon from "./icons/GitHubMiniIcon.astro";
import GmailIcon from "./icons/GmailIcon.astro";
import ResumeIcon from "./icons/ResumeIcon.astro";
---

<div class="presentation-container">
  <button
    id="skip-button"
    class="flex absolute top-20 right-[-90%] rounded-lg border-2 border-white p-1 cursor-pointer opacity-50 hover:opacity-100 transition-opacity duration-300 ease-in-out font-extralight"
    >Skip animation
  </button>
  <div id="messages-container" class="absolute top-20 text-[2rem]">
    <p class="text-gradient message-1"></p>
    <p class="text-gradient message-2"></p>
    <p class="text-gradient message-3"></p>
    <p class="text-gradient message-4"></p>
  </div>
  <h1 class="message-5 hidden">FacuDev</h1>
  <!-- Presentation, My description -->
  <p
    class="message-description hidden text-gradient w-[80%] text-center mt-5 text-[1.4rem]"
  >
  </p>
  <!-- Icons links -->
  <div
    class="relative icons-buttons-container flex justify-center gap-3 h-10 w-full mt-5"
  >
    <!-- LinkedIn -->
    <a
      class="icon copyable hidden peer/linkedIn rounded-full"
      href="https://www.linkedin.com/in/facundo-botta/"
      target="_blank"
    >
      <LinkedInIcon class="h-full w-full" />
    </a>
    <div
      class="font-semibold text-sm opacity-0 absolute top-[130%] peer-hover/linkedIn:opacity-100 flex-col transition-opacity duration-300 ease-in-out cursor-default"
    >
      <p>Visit my LinkedIn</p>
      <p class="text-xs font-extralight">Ctrl+click to copy link</p>
    </div>

    <!-- GitHub -->
    <a
      class="icon copyable hidden peer/gitHub rounded-full"
      href="https://github.com/FacuBotta"
      target="_blank"
    >
      <GitHubMiniIcon class="h-full w-full" />
    </a>
    <div
      class="font-semibold text-sm opacity-0 absolute top-[130%] peer-hover/gitHub:opacity-100 flex-col transition-opacity duration-300 ease-in-out cursor-default"
    >
      <p>Check my GitHub!</p>
      <p class="text-xs font-extralight">Ctrl+click to copy link</p>
    </div>

    <!-- Gmail -->
    <a
      class="icon copyable hidden peer/gmail rounded-full"
      href="mailto:facundo.botta.dev@gmail.com"
      target="_blank"
    >
      <GmailIcon class="h-full w-full" />
    </a>
    <div
      class="font-semibold text-sm opacity-0 absolute top-[130%] peer-hover/gmail:opacity-100 flex-col transition-opacity duration-300 ease-in-out cursor-default"
    >
      <p>Email me via Gmail</p>
      <p class="text-xs font-extralight">Ctrl+click to copy address</p>
    </div>
    <!-- CV -->
    <div
      id="cv-icon-button"
      class="icon hidden peer/resume rounded-full cursor-pointer"
    >
      <ResumeIcon class="h-full w-full" />
    </div>
    <div
      class="font-semibold text-sm absolute top-[130%] peer-hover/resume:flex flex-col hidden transition-opacity duration-300 ease-in-out cursor-default"
    >
      <p>Download my CV</p>
    </div>
    <div class="cv-links-container relative">
      <ul
        id="cv-download-links"
        class="hidden mt-2 absolute -top-1/2 left-2 text-left font-extralight"
      >
        <li>
          <a
            href="cv-en-Facundo-Botta-2024.pdf"
            download
            class="hover:underline border-l pl-1"
          >
            Español
          </a>
        </li>
        <li>
          <a
            href="cv-en-Facundo-Botta-2024.pdf"
            download
            class="hover:underline border-l pl-1"
          >
            English
          </a>
        </li>
        <li>
          <a
            href="./cv-fr-Facundo-Botta-2024.pdf"
            download
            class="hover:underline border-l pl-1"
          >
            Français
          </a>
        </li>
      </ul>
    </div>
  </div>
</div>

<script>
  let skipAnimation = localStorage.getItem("skipAnimation");

  const video = document.getElementById("miVideo") as HTMLVideoElement;

  const messagesContainer = document.getElementById("messages-container");
  const message1 = messagesContainer?.querySelector(".message-1");
  const message2 = messagesContainer?.querySelector(".message-2");
  const message3 = messagesContainer?.querySelector(".message-3");
  const message4 = messagesContainer?.querySelector(".message-4");
  const message5 = document.querySelector(".message-5");
  const messageDescription = document.querySelector(".message-description");

  const iconsButtonsContainer = document.querySelector(
    ".icons-buttons-container"
  );
  const iconsLinks = iconsButtonsContainer?.querySelectorAll(".icon");

  const skipButton = document.getElementById(
    "skip-button"
  ) as HTMLButtonElement;

  // cambiar el texto del boton de la animacion en funcion del localStorage
  if (skipAnimation === "true") {
    skipButton.textContent = "See animation";
  } else {
    skipButton.textContent = "Skip animation";
  }
  const myDescription =
    "I'm a fullstack developer student, passionate about building and learning new things every day. I always put my best effort into taking my applications to the next level.\n Let's work together!";

  const welcomeMessages = [
    "Hi there!",
    "Welcome to my portfolio...",
    "My name is Facundo Botta...",
    "But everybody call me...",
  ];
  const writeTextAnimation = (
    textToInsert: string,
    elementTarget: any,
    typingSpeed: number = 50
  ) => {
    let tempMessage = "";

    for (let i = 0; i < textToInsert.length; i++) {
      setTimeout(() => {
        if (elementTarget) {
          tempMessage += textToInsert[i];
          elementTarget.textContent = tempMessage;
        }
      }, typingSpeed * i);
    }
  };

  let timesOutsAnimationPresentation: number[] = [];

  function animatePresentation() {
    window.addEventListener("load", () => {
      const presentationTimeOut1 = setTimeout(() => {
        writeTextAnimation(welcomeMessages[0], message1);
      }, 1000);
      timesOutsAnimationPresentation.push(presentationTimeOut1);
      const presentationTimeOut2 = setTimeout(() => {
        message1?.classList.toggle("animate-message");
        writeTextAnimation(welcomeMessages[1], message2, 40);
      }, 2000);
      timesOutsAnimationPresentation.push(presentationTimeOut2);
      const presentationTimeOut3 = setTimeout(() => {
        message2?.classList.toggle("animate-message");
        writeTextAnimation(welcomeMessages[2], message3, 35);
      }, 3500);
      timesOutsAnimationPresentation.push(presentationTimeOut3);
      const presentationTimeOut4 = setTimeout(() => {
        message3?.classList.toggle("animate-message");
        writeTextAnimation(welcomeMessages[3], message4, 30);
      }, 5000);
      timesOutsAnimationPresentation.push(presentationTimeOut4);
      const presentationTimeOut5 = setTimeout(() => {
        message4?.classList.toggle("animate-message");
        message5?.classList.toggle("animate-facuDev");
      }, 6500);
      timesOutsAnimationPresentation.push(presentationTimeOut5);
      const presentationTimeOut6 = setTimeout(() => {
        messageDescription?.classList.toggle("hidden");
        writeTextAnimation(myDescription, messageDescription, 12);
      }, 7500);
      timesOutsAnimationPresentation.push(presentationTimeOut6);
      const presentationTimeOut7 = setTimeout(() => {
        iconsLinks?.forEach((iconLink, index) => {
          setTimeout(() => {
            iconLink?.classList.replace("hidden", "animate-icons");
          }, index * 200);
        });
      }, 10500);
      timesOutsAnimationPresentation.push(presentationTimeOut7);
    });
  }
  function clearAllTimeouts() {
    timesOutsAnimationPresentation.forEach((timeout) => {
      clearTimeout(timeout);
    });
    timesOutsAnimationPresentation = [];
  }
  function showPresentationWithOutAnimation() {
    messagesContainer?.classList.add("hidden");
    message5?.classList.add("animate-facuDev");
    messageDescription?.classList.remove("hidden");
    writeTextAnimation(myDescription, messageDescription, 1);
    iconsLinks?.forEach((iconLink, index) => {
      setTimeout(() => {
        iconLink?.classList.replace("hidden", "animate-icons");
      }, index * 200);
    });
  }
  skipButton.addEventListener("click", () => {
    skipAnimation = localStorage.getItem("skipAnimation");
    if (skipAnimation === "true") {
      localStorage.setItem("skipAnimation", "false");
      window.location.reload();
      return;
    }
    // acelero el video hasta donde el scroll se libera y ademas libero el scroll aca también
    localStorage.setItem("skipAnimation", "true");
    skipButton.textContent = "See animation";
    // const passedTimeVideo = video.currentTime;
    video.currentTime = 11.5;
    // esto seria para acelerar el video pero da problemas para pagarla bien con el time...
    // es mas facil setear el currentTime y listo
    // video.playbackRate = 12 - passedTimeVideo;
    clearAllTimeouts();
    showPresentationWithOutAnimation();
    window.onscroll = null;
  });

  if (skipAnimation === "true") {
    showPresentationWithOutAnimation();
  } else {
    animatePresentation();
  }

  const links = document.querySelectorAll(
    ".icons-buttons-container a.copyable"
  );
  function copyLinks(event: any) {
    if (event.ctrlKey) {
      let link = event.currentTarget.getAttribute("href");

      const mailtoRegex = /mailto:(.*)/;
      if (mailtoRegex.test(link)) {
        link = link.replace(mailtoRegex, "$1");
      }

      const copyMessageContainer = event.currentTarget.nextElementSibling;
      const messages = copyMessageContainer.querySelectorAll("p");

      navigator.clipboard
        .writeText(link)
        .then(() => {
          if (copyMessageContainer) {
            const prevContent1 = messages[0].textContent;
            const prevContent2 = messages[1].textContent;

            messages[0].textContent = "Copied!";
            messages[1].textContent = link;

            setTimeout(() => {
              messages[0].textContent = prevContent1;
              messages[1].textContent = prevContent2;
            }, 2000);
          }
        })
        .catch((err) => {
          console.error("Error coping link:", err);
        });

      event.preventDefault();
    }
  }
  links.forEach((link) => {
    link.addEventListener("click", copyLinks);
  });

  const cvIconButton = document.getElementById("cv-icon-button");
  const cvDownloadLinks = document.getElementById("cv-download-links");
  if (cvIconButton) {
    cvIconButton.addEventListener("click", () => {
      cvDownloadLinks?.classList.toggle("hidden");
      setTimeout(() => {
        cvDownloadLinks?.classList.add("hidden");
      }, 5000);
    });
  }
</script>
<style>
  .presentation-container {
    user-select: none;
    height: 100%;
    width: 100%;
    padding-top: 50px;
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: center;
    text-align: center;
    gap: 2rem;
  }
  .animate-icons {
    display: inline-block;
    height: 100%;
    opacity: 0;
    animation: fadeInAndBounce 0.8s forwards ease-out; /* Duración ajustada */
  }
  .icons-buttons-container .icon:hover {
    scale: 1.1;
    box-shadow: rgba(197, 197, 197, 0.625) 0px 5px 15px;
    transition: all 0.4s ease-in-out;
  }
  .cv-links-container ul li:hover {
    color: #f9ff56;
    background: linear-gradient(to right, #f9ff5622, #f9ff5600);
  }

  @keyframes fadeInAndBounce {
    0% {
      opacity: 0;
      transform: scale(0.6);
    }
    60% {
      opacity: 1;
      transform: scale(1.1);
    }
    80% {
      transform: scale(0.95);
    }
    100% {
      opacity: 1;
      transform: scale(1);
    }
  }
  .animate-message {
    animation: fadeOut 1s forwards;
  }
  .animate-facuDev {
    display: inline-block;
    animation: fadeInFacuDev 1s forwards;
  }
  .presentation-container h1 {
    font-family: "Royal Fight", serif;
    font-size: 7rem;
    color: transparent;
    -webkit-text-stroke: 3px #d6f4f4;
    text-shadow:
      8px 8px 0px #07bccc,
      13px 13px 0px #e601c0,
      18px 18px 0px #e9019a,
      23px 23px 0px #f40468;
    /* 45px 45px 10px #e9e4a444; */
  }
  @keyframes fadeOut {
    0% {
      opacity: 1;
    }
    100% {
      opacity: 0;
    }
  }
  @keyframes fadeInFacuDev {
    0% {
      opacity: 0;
      transform: translateY(50px);
    }
    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }
  .text-gradient {
    font-weight: 600;
    background-image: var(--description-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 100%;
    background-position: 0%;
  }
</style>
<!-- 
CV en tres idiomas !
respetar nombres de skills (buscar en sitio oficial pa ver como lo escriben)
-->
