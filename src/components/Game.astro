---
import { getLangFromUrl, useTranslations } from "../i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<div
  id="game-container"
  class="absolute flex bottom-full h-40 w-full overflow-x-hidden"
>
  <div class="background"></div>
  <div class="background-clouds"></div>
  <img
    id="dino"
    src="/game/dino_stop.svg"
    alt="Dino chapter"
    class="h-[65px] absolute z-10 bottom-0 left-48"
  />
  <div class="relative left-[50%] -translate-x-1/2 top-0">
    <button
      id="trigger"
      class="border px-2 rounded-lg text-2xl text-nowrap text-white hover:border-primary-cyan hover:text-primary-cyan transition-colors ease-in-out duration-300"
      >Play</button
    >
  </div>
</div>
<div
  class="controls-container absolute top-5 left-56 flex flex-col items-center justify-center gap-2"
>
  <div
    class="display-score flex px-2 justify-left items-center absolute top-0 left-[150%] border border-white/50 rounded-lg h-10 min-w-20"
  >
    <p class="text-white/50 text-nowrap">Score:</p>
  </div>

  <img src="/game/s_key.svg" alt="jump key image" class="w-10" />
  <p class="text-white/50">{t("game.jump")}</p>
  <img src="/game/x_key.svg" alt="crouch key image" class="w-10" />
  <p class="text-white/50">{t("game.crouch")}</p>
</div>
<style>
  @media (max-width: 850px) {
    #game-container,
    .controls-container {
      display: none;
    }
  }
  .background-clouds {
    width: 100%;
    height: 50%;
    position: absolute;
    top: 0;
    left: 0;
    background: url("/game/clouds.svg");
    background-repeat: repeat;
    background-position: 0 0;
    background-size: auto 100%;
  }
  .background {
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    background: url("/game/background.svg");
    background-repeat: repeat;
    background-position: 0 0;
    background-size: auto 100%;
  }
  .animate-clouds {
    animation: animatedBackground 100s linear infinite;
  }
  .animate-background {
    animation: animatedBackground 50s linear infinite;
  }
  @keyframes animatedBackground {
    from {
      background-position: 0 0;
    }
    to {
      background-position: -10000px 0;
    }
  }
</style>

<script>
  const dinoDownImage_1 = new Image();
  dinoDownImage_1.src = "/game/dino_down_1.svg";
  const dinoDownImage_2 = new Image();
  dinoDownImage_2.src = "/game/dino_down_2.svg";

  const gameContainer = document.getElementById("game-container");
  const dino = document.getElementById("dino") as HTMLImageElement;
  const trigger = document.getElementById("trigger") as HTMLButtonElement;
  const background = document.querySelector(".background") as HTMLDivElement;
  const displayScore = document.querySelector(
    ".display-score p"
  ) as HTMLParagraphElement;
  const backgroundClouds = document.querySelector(
    ".background-clouds"
  ) as HTMLDivElement;

  let dinoUpInterval: number;
  let obstaclesIntervals: number[] = [];
  let difficultyInterval: number;
  let isJumping = false;
  let isDown = false;
  let isRunning = false;
  let runFrame = 0;
  let difficulty = 1.2;
  let score = 0;

  function gamePlay() {
    const obstacles = document.querySelectorAll(".obstacle");
    if (obstacles.length > 0 && gameContainer) {
      score = 0;
      displayScore.textContent = `Score: ${score}`;
      displayScore.style.color = "#9E9E9E";

      obstacles.forEach((obstacle) => {
        obstacle.remove();
      });
    }
    background?.classList.add("animate-background");
    backgroundClouds?.classList.add("animate-clouds");
    dinoRun();
    handleObstaclesAddition();
    difficultyInterval = setInterval(() => {
      if (isRunning) {
        difficulty += 0.3;
      }
    }, 1500);
  }
  trigger.addEventListener("click", () => {
    gamePlay();
    trigger.classList.add("hidden");
  });

  function gameFreeze() {
    trigger.classList.remove("hidden");
    background?.classList.remove("animate-background");
    backgroundClouds?.classList.remove("animate-clouds");
    obstaclesIntervals.forEach((interval) => {
      clearInterval(interval);
    });
    clearInterval(dinoUpInterval);
    clearInterval(difficultyInterval);
    difficulty = 1.2;
    displayScore.style.color = "#e601c0";
    isRunning = false;
    dino.src = "/game/dino_dead.svg";
  }

  function addObstacle() {
    const obstacle = document.createElement("img");
    let randomObstacle: number;
    if (difficulty >= 1.4) {
      randomObstacle = Math.floor(Math.random() * (difficulty > 4 ? 5 : 4)) + 1;
    } else {
      randomObstacle = 4;
    }
    obstacle.src = `/game/obstacle_${randomObstacle}.svg`;
    obstacle.classList.add("obstacle");
    obstacle.style.position = "absolute";
    if (randomObstacle === 5) {
      obstacle.style.bottom = "30%";
    } else {
      obstacle.style.bottom = "0";
    }
    obstacle.style.right = "-50px";
    gameContainer?.appendChild(obstacle);

    let animationId: number;

    const moveObstacle = () => {
      if (!gameContainer) return;

      const containerWidth = gameContainer.offsetWidth;
      const currentRight = parseFloat(obstacle.style.right);

      if (currentRight < containerWidth && isRunning) {
        obstacle.style.right = `${currentRight + 5 + difficulty * 2}px`;

        const dinoRect = dino.getBoundingClientRect();
        const obstacleRect = obstacle.getBoundingClientRect();

        const horizontalTolerance = obstacleRect.width / 2;
        const verticalTolerance = 5;

        let isCollision = false;
        if (obstacleRect.bottom > 0) {
          isCollision =
            dinoRect.right - horizontalTolerance - 10 > obstacleRect.left &&
            dinoRect.left + horizontalTolerance < obstacleRect.right &&
            (!isDown || isJumping);
        } else {
          isCollision =
            dinoRect.right - horizontalTolerance > obstacleRect.left &&
            dinoRect.left + horizontalTolerance < obstacleRect.right &&
            dinoRect.bottom - verticalTolerance > obstacleRect.top &&
            dinoRect.top + verticalTolerance < obstacleRect.bottom;
        }

        if (isCollision) {
          if (
            isJumping &&
            dinoRect.bottom < obstacleRect.top + obstacleRect.height / 2
          ) {
            score += 1;
            displayScore.textContent = `Score: ${score}`;
            requestAnimationFrame(moveObstacle);
          } else {
            dino.src = "/game/dino_dead.svg";
            gameFreeze();
          }
        } else {
          requestAnimationFrame(moveObstacle);
        }
      } else if (!isRunning) {
        cancelAnimationFrame(animationId);
      } else {
        obstacle.remove();
      }
    };

    animationId = requestAnimationFrame(moveObstacle);

    return () => {
      cancelAnimationFrame(animationId);
      obstacle.remove();
    };
  }

  function handleObstaclesAddition() {
    if (isRunning) {
      function addObstacleWithRandomDelay() {
        addObstacle();
        let randomInterval =
          600 + Math.floor(Math.random() * 800 - difficulty * 10);
        console.log(randomInterval);
        let timeoutId = setTimeout(addObstacleWithRandomDelay, randomInterval);
        obstaclesIntervals.push(timeoutId);
      }
      addObstacleWithRandomDelay();
    }
  }
  function dinoRun() {
    if (isRunning) return;
    isRunning = true;
    dinoUpInterval = setInterval(() => {
      if (isDown) {
        if (runFrame === 0) {
          dino.src = "/game/dino_down_1.svg";
          runFrame = 1;
        } else {
          dino.src = "/game/dino_down_2.svg";
          runFrame = 0;
        }
      } else if (!isDown) {
        if (runFrame === 0) {
          dino.src = "/game/dino_run_1.svg";
          runFrame = 1;
        } else {
          dino.src = "/game/dino_run_2.svg";
          runFrame = 0;
        }
      }
    }, 120);
  }
  function dinoJump() {
    if (isJumping) return;
    isJumping = true;
    let jumpHeight = 0;
    const jumpInterval = setInterval(() => {
      if (jumpHeight < 80) {
        jumpHeight += 10;
        dino.style.bottom = `${jumpHeight}px`;
      } else {
        clearInterval(jumpInterval);
        const fallInterval = setInterval(() => {
          if (jumpHeight > 0) {
            jumpHeight -= 10;
            dino.style.bottom = `${jumpHeight}px`;
          } else {
            clearInterval(fallInterval);
            isJumping = false;
          }
        }, 20);
      }
    }, 20);
  }

  document.addEventListener("keydown", function (event) {
    if (event.code === "KeyS" && !isJumping && isRunning) {
      event.preventDefault();
      dinoJump();
    }

    if (event.code === "KeyX" && !isDown && !isJumping && isRunning) {
      isDown = true;
      runFrame = 0;
    }
  });
  document.addEventListener("keyup", function (event) {
    if (event.code === "KeyX" && isRunning) {
      isDown = false;
      dino.src = "/game/dino_stop.svg";
    }
  });
</script>
