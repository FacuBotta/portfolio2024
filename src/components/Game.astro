<div
  id="game-container"
  class="absolute flex bottom-full h-40 w-full overflow-x-hidden"
>
  <img
    id="dino"
    src="/game/dino_stop.svg"
    alt="Dino chapter"
    class="h-[65px] absolute z-10 bottom-0 left-48"
  />
  <div class="relative left-[50%] top-0">
    <button
      id="trigger"
      class="border px-2 rounded-lg text-2xl text-nowrap text-white hover:border-primary-cyan hover:text-primary-cyan transition-colors ease-in-out duration-300"
      >Play</button
    >
  </div>
</div>
<style>
  #game-container {
    /* background: repeating-linear-gradient(
        to top,
        rgba(255, 0, 0, 0.226),
        transparent 50%
      ),
      repeating-linear-gradient(
        to left,
        rgba(255, 0, 0, 0.226),
        transparent 10%
      ); */
  }
</style>

<script>
  const gameContainer = document.getElementById("game-container");
  const dino = document.getElementById("dino") as HTMLImageElement;
  const trigger = document.getElementById("trigger") as HTMLButtonElement;

  let dinoUpInterval: number;
  let dinoDownInterval: number;
  let obstaclesIntervals: number[] = [];
  let difficultyInterval: number;
  let isJumping = false;
  let isDown = false;
  let isRunning = false;
  let runFrame = 0;
  let difficulty = 1.2;
  function changeGradientGameContainer(gradientIndex: number) {
    if (!gameContainer || gradientIndex < 3) return;
    gameContainer.style.backgroundImage = `liner-gradient(to top, rgba(255, ${(gradientIndex - 3) * 40 < 255 ? 255 - (gradientIndex - 3) * 40 : 0}, 0, 0.226), ${gradientIndex - 3}%, transparent)`;
  }

  function gamePlay() {
    const obstacles = document.querySelectorAll(".obstacle");
    if (obstacles.length > 0 && gameContainer) {
      gameContainer.style.backgroundImage = "";
      obstacles.forEach((obstacle) => {
        obstacle.remove();
      });
    }
    dinoRun();
    handleObstaclesAddition();
    difficultyInterval = setInterval(() => {
      if (isRunning) {
        difficulty += 0.2;

        changeGradientGameContainer(Math.floor(5));
      }
    }, 2000);
  }
  trigger.addEventListener("click", () => {
    gamePlay();
    trigger.classList.add("hidden");
  });

  function gameFreeze() {
    trigger.classList.remove("hidden");
    obstaclesIntervals.forEach((interval) => {
      clearInterval(interval);
    });
    clearInterval(dinoUpInterval);
    clearInterval(difficultyInterval);
    difficulty = 1;
    isRunning = false;
    dino.src = "/game/dino_dead.svg";
  }

  function addObstacle() {
    const obstacle = document.createElement("img");
    let randomObstacle: number;
    if (difficulty >= 1.4) {
      randomObstacle = Math.floor(Math.random() * (difficulty > 4 ? 5 : 4)) + 1;
    } else {
      randomObstacle = 4;
    }
    obstacle.src = `/game/obstacle_${randomObstacle}.svg`;
    obstacle.classList.add("obstacle");
    obstacle.style.position = "absolute";
    if (randomObstacle === 5) {
      obstacle.style.bottom = "30%";
    } else {
      obstacle.style.bottom = "0";
    }
    obstacle.style.right = "-50px";
    gameContainer?.appendChild(obstacle);

    let animationId: number;

    const moveObstacle = () => {
      if (!gameContainer) return;

      const containerWidth = gameContainer.offsetWidth;
      const currentRight = parseFloat(obstacle.style.right);

      if (currentRight < containerWidth && isRunning) {
        obstacle.style.right = `${currentRight + 5 * difficulty}px`;

        const dinoRect = dino.getBoundingClientRect();
        const obstacleRect = obstacle.getBoundingClientRect();

        const horizontalTolerance = obstacleRect.width / 2;
        const verticalTolerance = 5;

        let isCollision = false;
        if (obstacleRect.bottom > 0) {
          isCollision =
            dinoRect.right - horizontalTolerance - 10 > obstacleRect.left &&
            dinoRect.left + horizontalTolerance < obstacleRect.right &&
            (!isDown || isJumping);
        } else {
          isCollision =
            dinoRect.right - horizontalTolerance > obstacleRect.left &&
            dinoRect.left + horizontalTolerance < obstacleRect.right &&
            dinoRect.bottom - verticalTolerance > obstacleRect.top &&
            dinoRect.top + verticalTolerance < obstacleRect.bottom;
        }

        if (isCollision) {
          if (
            isJumping &&
            dinoRect.bottom < obstacleRect.top + obstacleRect.height / 2
          ) {
            requestAnimationFrame(moveObstacle);
          } else {
            dino.src = "/game/dino_dead.svg";
            gameFreeze();
          }
        } else {
          requestAnimationFrame(moveObstacle);
        }
      } else if (!isRunning) {
        cancelAnimationFrame(animationId);
      } else {
        obstacle.remove();
      }
    };

    animationId = requestAnimationFrame(moveObstacle);

    return () => {
      cancelAnimationFrame(animationId);
      obstacle.remove();
    };
  }

  function handleObstaclesAddition() {
    if (isRunning) {
      const addObstacleInterval = setInterval(
        () => {
          if (isRunning) {
            addObstacle();
          } else {
            clearInterval(addObstacleInterval);
          }
        },
        (800 + Math.random() * 500) /
          difficulty /* TODO aumentar la probabilidad de que se agreguen más obstáculos */
      );

      obstaclesIntervals.push(addObstacleInterval);
    }
  }
  function dinoRun() {
    if (isRunning) return;
    isRunning = true;

    dinoUpInterval = setInterval(() => {
      if (isDown) return;
      if (runFrame === 0) {
        dino.src = "/game/dino_run_1.svg";
        runFrame = 1;
      } else {
        dino.src = "/game/dino_run_2.svg";
        runFrame = 0;
      }
    }, 120);
  }
  function dinoJump() {
    if (isJumping) return;
    isJumping = true;
    let jumpHeight = 0;
    const jumpInterval = setInterval(() => {
      if (jumpHeight < 80) {
        jumpHeight += 8; // Sube
        dino.style.bottom = `${jumpHeight}px`;
      } else {
        clearInterval(jumpInterval);
        const fallInterval = setInterval(() => {
          if (jumpHeight > 0) {
            jumpHeight -= 8; // Baja
            dino.style.bottom = `${jumpHeight}px`;
          } else {
            clearInterval(fallInterval);
            isJumping = false;
          }
        }, 20);
      }
    }, 20);
  }

  document.addEventListener("keydown", function (event) {
    if (event.code === "KeyW" && !isJumping && isRunning) {
      event.preventDefault();
      dinoJump();
    }

    if (event.code === "KeyS" && !isDown && !isJumping && isRunning) {
      isDown = true;
      runFrame = 0;
    }
  });
  document.addEventListener("keyup", function (event) {
    if (event.code === "KeyS" && isRunning) {
      isDown = false;
      dino.src = "/game/dino_stop.svg";
    }
  });

  dinoDownInterval = setInterval(() => {
    if (isDown && isRunning) {
      if (runFrame === 0) {
        dino.src = "/game/dino_down_1.svg";
        runFrame = 1;
      } else {
        dino.src = "/game/dino_down_2.svg";
        runFrame = 0;
      }
    }
  }, 100);
</script>
