---
import { getLangFromUrl, useTranslations } from '../i18n/utils';
import GitHubMiniIcon from './icons/GitHubMiniIcon.astro';
import GmailIcon from './icons/GmailIcon.astro';
import LinkedInIcon from './icons/LinkedInIcon.astro';
import ResumeIcon from './icons/ResumeIcon.astro';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<div
  class="icons-buttons-container relative flex justify-center lg:justify-start gap-3 h-10 w-full mt-5"
>
  <!-- LinkedIn -->
  <a
    aria-label="Link to my linkedIn profile"
    class="icon hidden copyable peer/linkedIn rounded-full"
    href="https://www.linkedin.com/in/facundo-botta/"
    target="_blank"
  >
    <LinkedInIcon />
  </a>
  <div
    class="font-semibold text-sm opacity-0 absolute top-[130%] peer-hover/linkedIn:opacity-100 flex-col transition-opacity duration-300 ease-in-out cursor-default"
  >
    <p>{t('presentation.icon.link')[0]}</p>
    <p class="text-xs font-extralight">{t('presentation.icon.link')[1]}</p>
  </div>

  <!-- GitHub -->
  <a
    aria-label="Link to my GitHub account"
    class="icon hidden copyable peer/gitHub rounded-full"
    href="https://github.com/FacuBotta"
    target="_blank"
  >
    <GitHubMiniIcon />
  </a>
  <div
    class="font-semibold text-sm opacity-0 absolute top-[130%] peer-hover/gitHub:opacity-100 flex-col transition-opacity duration-300 ease-in-out cursor-default"
  >
    <p>{t('presentation.icon.github')[0]}</p>
    <p class="text-xs font-extralight">{t('presentation.icon.github')[1]}</p>
  </div>

  <!-- Gmail -->
  <a
    aria-label="Link to Gmail message"
    class="icon hidden copyable peer/gmail rounded-full"
    href="mailto:facundo.botta.dev@gmail.com"
    target="_blank"
  >
    <GmailIcon />
  </a>
  <div
    class="font-semibold text-sm opacity-0 absolute top-[130%] peer-hover/gmail:opacity-100 flex-col transition-opacity duration-300 ease-in-out cursor-default"
  >
    <p>{t('presentation.icon.gmail')[0]}</p>
    <p class="text-xs font-extralight">{t('presentation.icon.gmail')[1]}</p>
  </div>
  <!-- CV -->
  <div
    id="cv-icon-button"
    class="cv-icon-button icon hidden peer/resume rounded-full cursor-pointer"
  >
    <ResumeIcon />
  </div>
  <div
    class="font-semibold text-sm absolute top-[130%] peer-hover/resume:flex flex-col hidden transition-opacity duration-300 ease-in-out cursor-default"
  >
    <p>{t('presentation.icon.resume')}</p>
  </div>
  <div class="cv-links-container relative">
    <ul
      id="cv-download-links"
      class="cv-download-links hidden mt-2 absolute -top-1/2 left-2 text-left font-extralight"
    >
      <li>
        <a
          aria-label="Download my CV in Spanish"
          href="/resume/cv-es-Facundo-Botta-2025.pdf"
          download
          class="hover:underline border-l pl-1"
        >
          Español
        </a>
      </li>
      <li>
        <a
          aria-label="Download my CV in English"
          href="/resume/cv-en-Facundo-Botta-2025.pdf"
          download
          class="hover:underline border-l pl-1"
        >
          English
        </a>
      </li>
      <li>
        <a
          aria-label="Download my CV in French"
          href="/resume/cv-fr-Facundo-Botta-2025.pdf"
          download
          class="hover:underline border-l pl-1"
        >
          Français
        </a>
      </li>
    </ul>
  </div>
</div>
<script>
  const iconsButtonsContainer = document.querySelectorAll(
    '.icons-buttons-container'
  );
  iconsButtonsContainer?.forEach((iconsButtonsContainer) => {
    const iconsLinks = iconsButtonsContainer?.querySelectorAll('.icon');

    iconsLinks?.forEach((iconLink, index) => {
      setTimeout(() => {
        iconLink?.classList.replace('hidden', 'animate-icons');
      }, index * 200);
    });

    const links = iconsButtonsContainer.querySelectorAll(
      '.icons-buttons-container a.copyable'
    );
    function copyLinks(event: any) {
      if (event.ctrlKey) {
        let link = event.currentTarget.getAttribute('href');

        const mailtoRegex = /mailto:(.*)/;
        if (mailtoRegex.test(link)) {
          link = link.replace(mailtoRegex, '$1');
        }

        const copyMessageContainer = event.currentTarget.nextElementSibling;
        const messages = copyMessageContainer.querySelectorAll('p');

        navigator.clipboard
          .writeText(link)
          .then(() => {
            if (copyMessageContainer) {
              const prevContent1 = messages[0].textContent;
              const prevContent2 = messages[1].textContent;

              messages[0].textContent = 'Copied!';
              messages[1].textContent = link;

              setTimeout(() => {
                messages[0].textContent = prevContent1;
                messages[1].textContent = prevContent2;
              }, 2000);
            }
          })
          .catch((err) => {
            console.error('Error coping link:', err);
          });

        event.preventDefault();
      }
    }
    links.forEach((link) => {
      link.addEventListener('click', copyLinks);
    });

    const cvIconButtons =
      iconsButtonsContainer.querySelector('.cv-icon-button');

    const cvDownloadLinks =
      iconsButtonsContainer.querySelector('.cv-download-links');

    if (cvIconButtons) {
      cvIconButtons.addEventListener('click', () => {
        cvDownloadLinks?.classList.toggle('hidden');
        setTimeout(() => {
          cvDownloadLinks?.classList.add('hidden');
        }, 5000);
      });
    }
  });
</script>
<style>
  .animate-icons {
    display: inline-block;
    height: 100%;
    opacity: 0;
    animation: fadeInAndBounce 0.8s forwards ease-out;
  }
  .icons-buttons-container .icon:hover {
    scale: 1.1;
    box-shadow: rgba(197, 197, 197, 0.625) 0px 5px 15px;
    transition: all 0.2s ease-in-out;
  }
  .cv-links-container ul li:hover {
    color: #f9ff56;
    background: linear-gradient(to right, #f9ff5622, #f9ff5600);
  }

  @keyframes fadeInAndBounce {
    0% {
      opacity: 0;
      transform: scale(0.6);
    }
    60% {
      opacity: 1;
      transform: scale(1.1);
    }
    80% {
      transform: scale(0.95);
    }
    100% {
      opacity: 1;
      transform: scale(1);
    }
  }
</style>
